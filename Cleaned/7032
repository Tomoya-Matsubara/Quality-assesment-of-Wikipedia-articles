JRuby is a Java implementation of the Ruby programming language, being developed by the JRuby team. It is free software released under a three-way CPL/GPL/LGPL license. JRuby is tightly integrated with Java to allow the embedding of the interpreter into any Java application with full two-way access between the Java and the Ruby code (similar to Jython for the Python language).
JRuby's lead developers are Charles Nutter, Thomas Enebo, Ola Bini and Nick Sieger. In September 2006, Sun Microsystems hired Enebo and Nutter to work on JRuby full time.1 In June 2007, ThoughtWorks hired Ola Bini to work on Ruby and JRuby.2 In July 2009, the JRuby developers left Sun to continue JRuby development at Engine Yard.3
History
JRuby was originally created by Jan Arne Petersen, in 2001. At that time and for several years following, the code was a direct port of the Ruby 1.6 C code. With the release of Ruby 1.8.6, an effort began to update JRuby to 1.8.6 features and semantics. Since 2001, several contributors have assisted the project, leading to the current () core team of four members.
The Netbeans Ruby Pack, available since NetBeans 6.0, allows IDE development with Ruby and JRuby, as well as Ruby on Rails for the two implementations of Ruby.45
JRuby 1.1 added Just-in-time compilation and Ahead-of-time compilation modes to JRuby and was already faster in most cases than the current Ruby 1.8.7 reference implementation6.
JRuby 1.1.1 is stated to be packaged in Fedora 978.
Since version 1.1.1, the JRuby team began to issue point releases often to quickly address issues that are brought up by users9.
On July 2009, the core JRuby developers, Charles Nutter, Thomas Enebo and Nick Sieger, joined Engine Yard to continue JRuby development.1011
JRuby initially supported Ruby MRI 1.8.6, and gradually improved its Ruby 1.9 support12. Since 1.4.0 it also support Ruby 1.8.7.
Rails
JRuby supports Ruby on Rails since version 0.9 (May 2006) 1314, with the ability to execute RubyGems and WEBrick. Since the hiring of the two lead developers by Sun, Rails compatibility and speed have improved greatly. JRuby version 1.0 successfully passed nearly all of Rails' own test cases15. Since then, developers have begun to use JRuby for Rails applications in production environments 16.
Multiple virtual machine collaboration
On February 27, 2008, Sun Microsystems and the University of Tokyo announced a joint-research project to implement a virtual machine capable of executing more than one Ruby or JRuby application on one interpreter17.
Dynamic invocation on Java Virtual Machines
JSR 292 (Supporting Dynamically Typed Languages on the JavaTM Platform) 18 propose to:
add a new invokedynamic instruction at the JVM level, to allow method invocation relying on dynamic type checking,
to be able to change the classes and methods at runtime dynamically in a production environment.
The Sun Open source project Multi Language Virtual Machine aim to prototype this JSR19. The first working prototype, developed as a patch on OpenJDK, was announced and made available on end of August 20082021.
The JRuby team has successfully wired dynamic invocation in their codebase, albeit in a very primitive way. Dynamic invocation shipped with the 1.1.5 release, although being disabled on JVMs without Dynamic invocation capabilities22.
Release history
This table present only releases that present significant steps in JRuby history, aside from versions that mainly fixed bugs and improved performance.
Release
Release Date
Highlights
0.9
2006-08-01
Rails support23
1.1
2008-03-28
Performs better than Ruby MRI 1.8.724
AOT mode and JIT mode25
1.1.4
2008-08-28
Refactored Java integration layer
Beginning of Ruby 1.9 support
FFI subsystem for calling C libraries{{cite web
1.2.0{{cite web
url=http://docs.codehaus.org/display/JRUBY/2009/03/16/JRuby+1.2.0+Released
title=JRuby 1.2.0 Released
1.3.0{{cite web
url=http://docs.codehaus.org/display/JRUBY/2009/06/03/JRuby+1.3.0+Released
title=JRuby 1.3.0 Released
1.4.0{{cite web
url=http://www.jruby.org/2009/11/02/jruby-1-4-0
title=JRuby 1.4.0 Released
Design
Since early 2006, the current JRuby core team has endeavored to move JRuby beyond being a simple C port, to support better performance and to aid eventual compilation to Java bytecode. To support this end, the team set an ambitious goal: to be able to run Ruby on Rails unmodified using JRuby. In the process of achieving this goal, the JRuby test suite expanded to such extent that the team gained confidence in the &quot;correctness&quot; of JRuby. As a result, toward the end of 2006 and in the beginning of 2007, they began to commit much more complicated redesigns and refactorings of JRuby's core subsystems.
JRuby is designed to work as a mixed-mode virtual machine for Ruby, where code can be either interpreted directly, just-in-time compiled at runtime to Java bytecode, or ahead-of-time compiled to Java bytecode before execution. Until October 2007, only the interpreted mode supported all Ruby's constructs, but a full AOT/JIT compiler is available since version 1.126. The compiler design allows for interpreted and compiled code to run side-by-side, as well as decompilation to reoptimize and outputting generated bytecode as Java class files.
Frameworks support
JRuby has built-in support for Rails, RSpec, Rake, and RubyGems. It embeds an FFI subsystem to allow to use C libraries bundled as gems.
It also allows to launch the Interactive Ruby Shell (irb) as Ruby MRI does.
Programming
Ruby meets Java
JRuby is essentially the Ruby interpreter, except this version is written entirely in Java. JRuby features some of the same concepts, including object-oriented programming, and duck-typing as Ruby. The key difference is that JRuby is tightly integrated with Java, and can be called directly from Java programs27.
Calling Java from JRuby
One powerful feature of JRuby is its ability to invoke the classes of the Java Platform. To do this, one must first load JRuby's Java support, by calling &quot;include Java&quot; (&quot;require 'java'&quot; in earlier versions). The following example creates a Java  with a :
include Java
frame = javax.swing.JFrame.new()
frame.getContentPane().add(javax.swing.JLabel.new(&#39;Hello, World!&#39;))
frame.setDefaultCloseOperation(javax.swing.JFrame::EXIT_ON_CLOSE)
frame.pack()
frame.set_visible(true)
JRuby also allows the user to call Java code using the more Ruby-like underscore method naming and to refer to JavaBean properties as attributes:
frame.content_pane.add label
frame.visible = true
Calling JRuby from Java
JRuby can just as easily be called from Java, using either the JSR 22328 Scripting for Java 6 or the Apache Bean Scripting framework. More information on this is available in the JRuby Wiki article.
Performance
JRuby supports interpreted mode, AOT mode, and JIT mode (the last two modes are available since version 1.129). JRuby evolved from being several times slower than Ruby Reference implementation30, to being several times faster.31 32 Benchmarks as of 16 December 2009, show JRuby using between 2 and 56 times the memory of Ruby MRI.33
Interpreted mode
In this mode, JRuby 1.0 was slower than the C Ruby reference34. For example, serving up Rails requests in the standard interpreted mode, JRuby was 50% to 70% slower than C Ruby 1.8. Since then, JRuby performance in interpreted mode has improved a lot. The JRuby team claims that JRuby 1.1.4 is 15%-20% faster in interpreted mode than Ruby MRI 35.
When using Ruby 1.9 (YARV) benchmarks on Java 6, interpreted JRuby 1.0 was 4 times slower than Ruby (including startup time).
Just-in-time compilation mode
JIT mode is available since JRuby 1.1. In performance benchmarks, JRuby is consistently 200% to 300% faster than C Ruby 1.8.6 36 but still 15%-25% slower than C Ruby 1.9. However, the JRuby 1.1.6 version outperforms C Ruby 1.9 in some cases 3738 39.
Also in a real Mongrel web server application, JRuby performance is better than Ruby (after the Virtual Machine has instantiated)40.
See also
Jython
YARV
ZK (framework) &lt;U+2013&gt; an Ajax framework supporting JRuby
Monkeybars Framework
Da Vinci Machine
References
Bibliography
External links
The JRuby home page
The JRuby Wiki
JRubyHub.com: The hub for all resources related to JRuby and JRuby on Rails (JRoR)
JRubyonRails.de: JRuby on Rails Blog (german)
Joshua Fox, &quot;Ruby for the Java world&quot;, JavaWorld
JRuby Roadmap for 2007
The Great Ruby Shootout: JRuby compared to other Ruby VMs
Article on JRuby at IBM DeveloperWorks
Joshua Fox, &quot;JRuby on Rails&quot;, JavaWorld
Scripting on the Java platform, JavaWorld
JRuby development in NetBeans
Deploying a Rails Application in Tomcat
Calling Ruby&lt;U+2019&gt;s ActiveRecord from Java Using the Bean Scripting Framework
Deploying JRuby on Rails application on Sun Java System Web Server 7
Easy to install distribution of JRuby, Tomcat and Glassfish
Arun's Flash Demo: First JRuby app in GlassFish V2
First JRuby app in GlassFish V3
JRuby on Rails Blog (german)
Media
JavaOne 2007 Exploiting JRuby
JavaOne 2007 JRuby on Rails
Roumen's Ruby Flash Demo (Part One): JRuby on Rails in NetBeans
Roumen's Ruby Flash Demo (Part Two): Advanced JRuby editing features in NetBeans
Java Posse, Interview with Charles Oliver Nutter and Thomas Enebo about JRuby
A presentation by Charles Nutter introducing JRuby, from QCon San Francisco 2007
An interview with Charles Nutter about several aspects of JRuby, from QCon San Francisco 2007
A presentation by Ola Bini about JRuby's implementation and optimization, from QCon London 2008
An interview with Nick Sieger about JRuby, from RubyFringe 2008
A presentation by Charles Nutter about JRuby internal details and future development, from the Sun JVM Languages Summit 2009
de:JRuby es:JRuby fr:JRuby ja:JRuby pt:JRuby ru:JRuby zh-yue:JRuby
Category:Free software programmed in Java Category:Free software programmed in Ruby Category:JVM programming languages Category:Scripting languages Category:Object-oriented programming languages
↩
↩
↩
↩
↩
↩
↩
↩
↩
↩
↩
↩
↩
98.6% of the 2,807 Rails-specific test cases execute successfully; see JRuby 0.9.8 Released↩
↩
↩
see JSR 292↩
↩
↩
↩
↩
↩
↩
JSR 223: Scripting for the Java Platform Specification Request↩
↩
↩
↩
↩
↩
↩
↩
↩
↩
